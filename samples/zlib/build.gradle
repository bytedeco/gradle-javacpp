plugins {
    id 'java-library'
    id 'org.bytedeco.gradle-javacpp-build' version '1.5.10'
    id 'maven-publish'
    id 'signing'
}

group = 'org.bytedeco'
version = "1.3.1-$javacppVersion"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
    api "org.bytedeco:javacpp:$javacppVersion"
    javacppPlatform "org.bytedeco:javacpp-platform:$javacppVersion"
    javacppPlatform "org.bytedeco:zlib:$version:android-arm"
    javacppPlatform "org.bytedeco:zlib:$version:android-arm64"
    javacppPlatform "org.bytedeco:zlib:$version:android-x86"
    javacppPlatform "org.bytedeco:zlib:$version:android-x86_64"
    javacppPlatform "org.bytedeco:zlib:$version:linux-x86"
    javacppPlatform "org.bytedeco:zlib:$version:linux-x86_64"
    javacppPlatform "org.bytedeco:zlib:$version:macosx-x86_64"
    javacppPlatform "org.bytedeco:zlib:$version:windows-x86"
    javacppPlatform "org.bytedeco:zlib:$version:windows-x86_64"
    testRuntimeOnly "org.bytedeco:javacpp:$javacppVersion:$javacppPlatform"
    testImplementation 'junit:junit:4.13.2'
}

tasks.withType(org.bytedeco.gradle.javacpp.BuildTask) {
    if (javacppPlatform.startsWith("android")) {
        properties = "$javacppPlatform-clang"
        propertyKeysAndValues = [ 'platform.root' : System.getProperty('user.home') + '/Android/Sdk/ndk-bundle/',
                                  'platform.compiler' : "$buildDir/$javacppPlatform/toolchain/bin/clang++".toString() ]
        test.enabled = false
    }
    includePath = ["$buildDir/$javacppPlatform/include"]
    linkPath = ["$buildDir/$javacppPlatform/lib"]
}

javacppBuildCommand {
    buildCommand = ['bash', 'build.sh']
}

javacppBuildParser {
    classOrPackageNames = ['org.bytedeco.zlib.presets.*']
    outputDirectory = file("$buildDir/generated/sources/javacpp/")
}

javacppBuildCompiler {
    copyLibs = true
}

jar {
    manifest {
        attributes 'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
                   'Implementation-Title': 'JavaCPP Presets for zlib',
                   'Implementation-Vendor': 'Bytedeco',
                   'Implementation-Version': project.version,
                   'Specification-Title': 'JavaCPP Presets for zlib',
                   'Specification-Vendor': 'Bytedeco',
                   'Specification-Version': project.version
    }
}

javadoc {
    failOnError = false
    options.links = ['http://bytedeco.org/javacpp/apidocs']
}

java {
    withJavadocJar()
    withSourcesJar()
}

// Reason: Task ':javacppBuildCommand' uses this output of task ':javacppPomProperties' without declaring an explicit or implicit dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed.
compileJava.dependsOn(tasks.named("javacppBuildParser"))
tasks.withType(WriteProperties).forEach {
    it.dependsOn(tasks.named("javacppBuildParser"))
}

// Reason: Task ':javadoc' uses this output of task ':javacppPomProperties' without declaring an explicit or implicit dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed.
tasks.named("javadoc").configure { dependsOn("javacppPomProperties") }

// Reason: Task ':javacppBuildCommand' uses this output of task ':sourcesJar' without declaring an explicit or implicit dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed.
tasks.named("javacppBuildCommand").configure { dependsOn("sourcesJar") }

// Reason: Task ':compileTestJava' uses this output of task ':javacppPomProperties' without declaring an explicit or implicit dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed.
tasks.named("compileTestJava").configure { dependsOn("javacppPomProperties") }

// Reason: Task ':javacppBuildCommand' uses this output of task ':generatePomFileForMavenJavaPublication' without declaring an explicit or implicit dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed.
// and this does not work
tasks.named("javacppBuildCommand").configure { dependsOn("generatePomFileForMavenJavaPublication") }
// Instead, this should make it work:
tasks.named("javacppBuildCommand").configure { dependsOn(tasks.withType(GenerateMavenPom)) }

def pomClosure = {
    name = 'JavaCPP Presets for zlib'
    delegate.description = 'Sample project for the build plugin of Gradle JavaCPP'
    url = 'http://bytedeco.org/gradle-javacpp/'
    licenses {
        license {
            name = 'Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0'
            distribution = 'repo'
        }
        license {
            name = 'GNU General Public License (GPL) version 2, or any later version'
            url = 'http://www.gnu.org/licenses/'
            distribution = 'repo'
        }
        license {
            name = 'GPLv2 with Classpath exception'
            url = 'http://www.gnu.org/software/classpath/license.html'
            distribution = 'repo'
        }
    }
    developers {
        developer {
            id = 'saudet'
            name = 'Samuel Audet'
            email = 'samuel.audet@gmail.com'
        }
    }
    scm {
        url = 'https://github.com/bytedeco/gradle-javacpp'
        connection = 'scm:git:git://github.com/bytedeco/gradle-javacpp.git'
        developerConnection = 'scm:git:ssh://git@github.com/bytedeco/gradle-javacpp.git'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifacts = [jar, javacppJar, javadocJar, sourcesJar] + javacppBuild.existingArtifacts(configurations.javacppPlatform)
            pom pomClosure
        }
        mavenJavacppPlatform(MavenPublication) {
            groupId project.group
            artifactId project.name + "-platform"
            artifacts = [javacppPlatformJar, javacppPlatformJavadocJar, javacppPlatformSourcesJar]
            pom pomClosure
            pom.withXml javacppBuild.xmlAction(configurations.javacppPlatform)
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username System.getenv('CI_DEPLOY_USERNAME')
                password System.getenv('CI_DEPLOY_PASSWORD')
            }
        }
    }
}

signing {
    useGpgCmd()
    if (!version.endsWith('SNAPSHOT')) {
        sign publishing.publications.mavenJava
        sign publishing.publications.mavenJavacppPlatform
    }
}
